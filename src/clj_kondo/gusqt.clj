(ns clj-kondo.gusqt
  "Generate GUSQT-format EDN from `findings`.

  `findings` are findings as generated by `clj-condo.main/process-file`, q.v.
  That is to say a vector of maps, where each map has keys:

  * :level
  * :filename
  * :col
  * :row
  * :message

  GUSQT format is as defined
  [here](https://github.com/simon-brooke/gusqt/blob/master/src/gusqt/wrappers/README.md)"
  (:require
       [clj-kondo.impl.utils :refer [deep-merge]]))

(defn as-number
  "If `x` is numeric, x; if x is a string representation of a number, that
  number; if `x` is a keyword whose name is a string representation of a
  number, that number; otherwise, zero."
  [x]
  (cond
    (number? x) x
    (string? x) (try (as-number (read-string x)) (catch Exception _ 0))
    (keyword? x) (as-number (name x))
    :else 0))

(defn as-gusqt
  "Generate a map suitable for writing as GUSQT-format EDN from these
  `findings`."
  [findings]
  (reduce
    deep-merge
    {}
    (map
      (fn [f n]
        {(:filename f)
         {:lines
          {(as-number (:row f))
           {:clj-kondo
            {n
             {:severity (:level f)
              :file (:filename f)
              :line (as-number (:row f))
              :column (as-number (:col f))
              :text (:message f)}}}}}})
      findings
      (range))))
